/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.pharmacy.app.GUI.Importing;

import com.pharmacy.app.BUS.MedicalProductsBUS;
import com.pharmacy.app.BUS.PurchaseOrderBUS;
import com.pharmacy.app.BUS.PurchaseOrderDetailsBUS;
import com.pharmacy.app.BUS.SuplierInvoiceDetailsBUS;
import com.pharmacy.app.BUS.SuplierInvoicesBUS;
import com.pharmacy.app.DAO.SupplierInvoiceDetailsDAO;
import com.pharmacy.app.DTO.MedicalProductsDTO;
import com.pharmacy.app.DTO.PurchaseOrderDTO;
import com.pharmacy.app.DTO.PurchaseOrderDetailsDTO;
import com.pharmacy.app.DTO.SuplierInvoiceDTO;
import com.pharmacy.app.DTO.SuplierInvoiceDetailsDTO;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author LENOVO
 */
public class ConfirmStockIn extends javax.swing.JDialog {

    private SuplierInvoicesBUS supInvBUS = new SuplierInvoicesBUS();
    private SuplierInvoiceDetailsBUS supInvDeBUS = new SuplierInvoiceDetailsBUS();
    private PurchaseOrderBUS poBUS = new PurchaseOrderBUS();
    private PurchaseOrderDetailsBUS poDeBUS = new PurchaseOrderDetailsBUS();
    private MedicalProductsBUS productBUS = new MedicalProductsBUS();

    /**
     * Creates new form ConfirmStockIn
     */
    public ConfirmStockIn(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        centerTableContent(detailsTbl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        detailsTbl = new javax.swing.JTable();
        importBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtPOid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtManagerID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSum = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtInvoiceID = new javax.swing.JTextField();
        txtSup = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi tiết phiếu nhập", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(822, 407));

        detailsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Mã thuốc", "Tên thuốc", "Số lượng", "Mã lô thuốc", "NSX", "HSD", "Giá nhập", "Giá bán", "Số lượng thực nhận", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        detailsTbl.setPreferredSize(new java.awt.Dimension(600, 402));
        detailsTbl.setRowHeight(30);
        detailsTbl.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(detailsTbl);
        if (detailsTbl.getColumnModel().getColumnCount() > 0) {
            detailsTbl.getColumnModel().getColumn(0).setMinWidth(30);
            detailsTbl.getColumnModel().getColumn(0).setPreferredWidth(40);
            detailsTbl.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        importBtn.setBackground(new java.awt.Color(0, 204, 51));
        importBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        importBtn.setForeground(new java.awt.Color(255, 255, 255));
        importBtn.setText("NHẬP KHO");
        importBtn.setEnabled(false);
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });

        cancelBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancelBtn.setText("THOÁT");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Mã đơn:");

        txtPOid.setEditable(false);

        jLabel3.setText("Nhà cung cấp:");

        txtManagerID.setEditable(false);

        jLabel6.setText("Người lập:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setText("TỔNG THÀNH TIỀN:");

        txtSum.setEditable(false);
        txtSum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSum.setText("0");

        jLabel7.setText("Mã phiếu nhập:");

        txtInvoiceID.setEditable(false);
        txtInvoiceID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInvoiceIDActionPerformed(evt);
            }
        });

        txtSup.setEditable(false);
        txtSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(289, 289, 289)
                                .addComponent(importBtn)
                                .addGap(50, 50, 50)
                                .addComponent(cancelBtn))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtInvoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(jLabel5)
                                .addGap(30, 30, 30)
                                .addComponent(txtPOid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(txtManagerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtManagerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPOid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(txtInvoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("XÁC NHẬN NHẬP HÀNG");
        getContentPane().add(jLabel4, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    public void loadStockInDialog(PurchaseOrderDTO selectedPO) {
        txtInvoiceID.setText(supInvBUS.generateNextProductID());
        txtManagerID.setText(selectedPO.getManagerUserID());
        txtPOid.setText(selectedPO.getPoID());
        txtSup.setText(selectedPO.getSupplierID());

        // Load chi tiết PO
        ArrayList<PurchaseOrderDetailsDTO> detailsList = poDeBUS.getAllPOdetails(selectedPO.getPoID());
        DefaultTableModel model = (DefaultTableModel) detailsTbl.getModel();
        model.setRowCount(0); // clear bảng

        int stt = 1;
        for (PurchaseOrderDetailsDTO detail : detailsList) {
            String productID = detail.getProductID();
            String productName = ""; // lấy từ MedicalProductsDTO

            MedicalProductsDTO product = productBUS.getProductByID(productID);
            if (product != null) {
                productName = product.getName();
            }

            model.addRow(new Object[]{
                stt++,
                productID,
                productName,
                detail.getQuantity(), 
                "",                    // Mã lô thuốc - nhập tay
                "",                   
                "",
                0.0,
                0.0,
                0,
                0.0// Thành tiền - tính sau
            });
        }

        // Thêm TableModelListener để tính toán tự động
        model.addTableModelListener(e -> {
            if (e.getColumn() == 4 || e.getColumn() == 5 || e.getColumn() == 6|| e.getColumn() == 7 || e.getColumn() == 8 || e.getColumn() == 9) {
                // Chỉ xử lý khi cột mã lô, giá nhập hoặc SL thực nhận thay đổi
                calculateRowTotal(e.getFirstRow());
                calculateTotalSum();
                checkValidation();
            }
        });

        // Ban đầu disable nút import
        importBtn.setEnabled(false);
    }
    
    private void centerTableContent(JTable table) {
        // Căn giữa tiêu đề
        JTableHeader header = table.getTableHeader();
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) header.getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Căn giữa nội dung
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    private void calculateRowTotal(int row) {
        DefaultTableModel model = (DefaultTableModel) detailsTbl.getModel();
        try {
            // Lấy giá nhập và số lượng thực nhận
            double importPrice = Double.parseDouble(model.getValueAt(row, 7).toString());
            int actualQuantity = Integer.parseInt(model.getValueAt(row, 9).toString());

            // Tính thành tiền
            double total = importPrice * actualQuantity;
            model.setValueAt(total, row, 10);
        } catch (Exception e) {
            // Nếu có lỗi (ô trống hoặc không phải số), set thành tiền về 0
            model.setValueAt(0.0, row, 10);
        }
    }

    private void calculateTotalSum() {
        DefaultTableModel model = (DefaultTableModel) detailsTbl.getModel();
        double sum = 0;

        for (int i = 0; i < model.getRowCount(); i++) {
            try {
                sum += Double.parseDouble(model.getValueAt(i, 10).toString());
            } catch (Exception e) {
                // Bỏ qua nếu có lỗi
            }
        }

        txtSum.setText(String.valueOf(sum));
    }

    private void checkValidation() {
        DefaultTableModel model = (DefaultTableModel) detailsTbl.getModel();
        boolean allRowsValid = true;

        for (int i = 0; i < model.getRowCount(); i++) {
            // Kiểm tra các ô mã lô, giá nhập, SL thực nhận
            Object lotNumber = model.getValueAt(i, 4);    // Cột mã lô
            Object manuDate = model.getValueAt(i, 5);
            Object expDate = model.getValueAt(i, 6);
            Object importPrice = model.getValueAt(i, 7);  
            Object sellPrice = model.getValueAt(i, 8);  
            Object actualQuantity = model.getValueAt(i, 9); // Cột SL thực nhận

            // Kiểm tra không null và không rỗng
            boolean isRowValid = (lotNumber != null && !lotNumber.toString().trim().isEmpty())
                             && (importPrice != null && !importPrice.toString().trim().isEmpty())
                             && (actualQuantity != null && !actualQuantity.toString().trim().isEmpty())
                             && (manuDate != null && !manuDate.toString().trim().isEmpty())
                             && (expDate != null && !expDate.toString().trim().isEmpty())
                             && (sellPrice != null && !sellPrice.toString().trim().isEmpty());

            // Nếu dòng này không valid, đánh dấu và thoát luôn
            if (!isRowValid) {
                allRowsValid = false;
                System.out.println("có giá trị null trong table");
                continue;
            }

            // Kiểm tra giá trị số hợp lệ
            try {
                double price = Double.parseDouble(sellPrice.toString());
                double imPrice = Double.parseDouble(importPrice.toString());
                LocalDate manu = LocalDate.parse(manuDate.toString());
                LocalDate exp = LocalDate.parse(expDate.toString());
                int quantity = Integer.parseInt(actualQuantity.toString());
                
                // validate giá và số lượng
                 if (imPrice <= 0 || price <= 0 || quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Giá và số lượng phải > 0", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    allRowsValid = false;
                    continue;
                }
                // validate hsd sau nsx
                if (!exp.isAfter(manu)) {
                    JOptionPane.showMessageDialog(this, "Ngày hết hạn phải sau ngày sản xuất", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    allRowsValid = false;
                    continue;
                }
               
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Dữ liệu không hợp lệ hoặc sai định dạng", "Lỗi", JOptionPane.ERROR_MESSAGE);
                allRowsValid = false;
                continue;
            }catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, 
                "Dòng " + (i+1) + ": Sai định dạng ngày (yyyy-MM-dd)\nVí dụ: 2026-07-03", 
                "Lỗi", 
                JOptionPane.ERROR_MESSAGE);
                allRowsValid = false;
                continue;
            }catch (Exception e) {
                System.out.println("Dòng " + (i+1) + ": Lỗi không xác định" ); 
                e.printStackTrace();
                allRowsValid = false;
                continue;
        }

        importBtn.setEnabled(allRowsValid);
    }
    }
    
    
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void txtInvoiceIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInvoiceIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInvoiceIDActionPerformed

    private void txtSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSupActionPerformed

    private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBtnActionPerformed
        String[] options = { "Xác nhận", "Hủy bỏ" };
        int choice = JOptionPane.showOptionDialog(
            null,
            "Bạn có chắc muốn nhập đơn hàng này không?",
            "Xác nhận tạo phiếu nhập",
            JOptionPane.DEFAULT_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[0]
        );
        if(choice == 0){
            //xác nhận
            
            SuplierInvoiceDTO supInvNew = new SuplierInvoiceDTO();
            supInvNew.setInvoiceID(txtInvoiceID.getText());
            supInvNew.setPoID(txtPOid.getText());
            supInvNew.setSupplierID(txtSup.getText());
            supInvNew.setManagerID(txtManagerID.getText());
            supInvNew.setTotalPrice(new BigDecimal(txtSum.getText()));
            supInvNew.setPurchaseDate(LocalDate.now());
            
            List<SuplierInvoiceDetailsDTO> details = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) detailsTbl.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                SuplierInvoiceDetailsDTO detail = new SuplierInvoiceDetailsDTO();
                detail.setInvoiceID(txtInvoiceID.getText());
                detail.setProductID(model.getValueAt(i, 1).toString());
                detail.setBatchID(model.getValueAt(i, 4).toString());
                detail.setManuDate(LocalDate.parse(model.getValueAt(i, 5).toString()));
                detail.setExpDate(LocalDate.parse(model.getValueAt(i, 6).toString()));
                detail.setUnitPrice(new BigDecimal((model.getValueAt(i, 7).toString())));
                detail.setSellPrice(Double.valueOf(model.getValueAt(i, 8).toString()));
                detail.setQuantity(Integer.parseInt(model.getValueAt(i, 9).toString()));
                detail.setTotalPrice(new BigDecimal((model.getValueAt(i, 10).toString())));

                details.add(detail);
            }

            supInvNew.setDetails(details);
            
            boolean Result = supInvBUS.addSupInv(supInvNew);
            if (Result) {
                JOptionPane.showMessageDialog(this, "Tạo phiếu nhập thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                // reset form hoac ko
                PurchaseOrderDTO updatePO = poBUS.getPOByID(txtPOid.getText());
                updatePO.setStatus("Đã nhập");
            } else {
                JOptionPane.showMessageDialog(this, "Tạo phiếu nhập thất bại. Vui lòng kiểm tra lại dữ liệu.", "Thất bại", JOptionPane.ERROR_MESSAGE);
            }
        }else{ 
            //hủy
            this.dispose();
        }
    }//GEN-LAST:event_importBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfirmStockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfirmStockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfirmStockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfirmStockIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ConfirmStockIn dialog = new ConfirmStockIn(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTable detailsTbl;
    private javax.swing.JButton importBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtInvoiceID;
    private javax.swing.JTextField txtManagerID;
    private javax.swing.JTextField txtPOid;
    private javax.swing.JTextField txtSum;
    private javax.swing.JTextField txtSup;
    // End of variables declaration//GEN-END:variables
}
