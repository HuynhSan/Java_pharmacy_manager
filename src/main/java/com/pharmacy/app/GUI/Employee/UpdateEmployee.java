/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.pharmacy.app.GUI.Employee;

import com.pharmacy.app.BUS.EmployeeBUS;
import com.pharmacy.app.DAO.EmployeeDAO;
import com.pharmacy.app.DTO.EmployeeDTO;
import com.pharmacy.app.Utils.EmployeeValidation;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author phong
 */
public class UpdateEmployee extends javax.swing.JDialog {
    private EmployeeDTO employeeDTO;
    private EmployeeBUS employeeBUS = new EmployeeBUS();
    private final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    /**
     * Creates new form UpdateEmployee
     * @param parent
     * @param modal
     * @param employee
     */
    public UpdateEmployee(java.awt.Frame parent, boolean modal, EmployeeDTO employee) {
        super(parent, modal);
        initComponents();
        this.employeeDTO = employee;
        setData(employee);
    }
    private void setData(EmployeeDTO employee) {
        txtEmployeeID.setText(employee.getEmployeeID());
        txtName.setText(employee.getName());
        txtPhone.setText(employee.getPhone());
        txtDOB.setText(employee.getDob().format(DATE_FORMAT));
        cbGender.setSelectedIndex(employee.getGender() ? 0 : 1);
        txtEmail.setText(employee.getEmail());
        txtAddress.setText(String.valueOf(employee.getAddress()));
    }
    private UpdateEmployee(JFrame jFrame, boolean b) {
        super(jFrame, b);
        initComponents();
    }
    
    /**
     * Validates the employee form inputs
     * @return true if all inputs are valid, false otherwise
     */
    private boolean validateForm() {
        EmployeeDAO employeeDAO = new EmployeeDAO();
        
        String name = txtName.getText().trim();
        String dob = txtDOB.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String address = txtAddress.getText().trim();

        // Validate required fields
        String nameError = EmployeeValidation.validateRequired(name, "Họ tên");
        if (!nameError.isEmpty()) {
            JOptionPane.showMessageDialog(this, nameError, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtName.requestFocus();
            return false;
        }

        // Validate date of birth
        String dobError = EmployeeValidation.validateDate(dob);
        if (!dobError.isEmpty()) {
            JOptionPane.showMessageDialog(this, dobError, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtDOB.requestFocus();
            return false;
        }

        // Validate phone
        String phoneError = EmployeeValidation.validatePhone(phone);
        if (!phoneError.isEmpty()) {
            JOptionPane.showMessageDialog(this, phoneError, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtPhone.requestFocus();
            return false;
        }
        
        // Check if phone already exists
        String phoneErrorExists = EmployeeValidation.validatePhoneExists(phone, txtEmployeeID.getText(), employeeDAO);
        if (!phoneErrorExists.isEmpty()){
            JOptionPane.showMessageDialog(this, phoneErrorExists, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtPhone.requestFocus();
            return false;
        }
        
        // Validate email if provided
        String emailError = EmployeeValidation.validateEmail(email);
        if (!emailError.isEmpty()) {
            JOptionPane.showMessageDialog(this, emailError, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtEmail.requestFocus();
            return false;
        }
        
        // Check if email already exists
        String emailErrorExists = EmployeeValidation.validateEmailExists(email, txtEmployeeID.getText(), employeeDAO);
        if (!emailErrorExists.isEmpty()){
            JOptionPane.showMessageDialog(this, emailErrorExists, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtEmail.requestFocus();
            return false;
        }
        
        // Validate address
        String addressError = EmployeeValidation.validateRequired(address, "Địa chỉ");
        if (!addressError.isEmpty()) {
            JOptionPane.showMessageDialog(this, addressError, "Lỗi", JOptionPane.ERROR_MESSAGE);
            txtAddress.requestFocus();
            return false;
        }

        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlUpdateButton = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        pnlUpdateEmployee = new javax.swing.JPanel();
        lblUpdateEmployee = new javax.swing.JLabel();
        pnlUpdateEmployeeFields = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cbGender = new javax.swing.JComboBox<>();
        txtEmail = new javax.swing.JTextField();
        txtDOB = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        lblEmpoyeeID = new javax.swing.JLabel();
        txtEmployeeID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(450, 550));
        setResizable(false);

        pnlUpdateButton.setBackground(new java.awt.Color(255, 255, 255));
        pnlUpdateButton.setPreferredSize(new java.awt.Dimension(304, 40));
        pnlUpdateButton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        btnUpdate.setBackground(new java.awt.Color(0, 204, 51));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Cập nhật");
        btnUpdate.setPreferredSize(new java.awt.Dimension(80, 30));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        pnlUpdateButton.add(btnUpdate);

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Xóa");
        btnDelete.setPreferredSize(new java.awt.Dimension(72, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlUpdateButton.add(btnDelete);

        btnCancel.setBackground(new java.awt.Color(153, 153, 153));
        btnCancel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Hủy");
        btnCancel.setPreferredSize(new java.awt.Dimension(72, 30));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        pnlUpdateButton.add(btnCancel);

        getContentPane().add(pnlUpdateButton, java.awt.BorderLayout.PAGE_END);

        pnlUpdateEmployee.setBackground(new java.awt.Color(255, 255, 255));
        pnlUpdateEmployee.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        pnlUpdateEmployee.setMinimumSize(new java.awt.Dimension(350, 20));
        pnlUpdateEmployee.setPreferredSize(new java.awt.Dimension(350, 20));
        pnlUpdateEmployee.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        lblUpdateEmployee.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblUpdateEmployee.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUpdateEmployee.setText("THÔNG TIN NHÂN VIÊN");
        lblUpdateEmployee.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblUpdateEmployee.setMaximumSize(new java.awt.Dimension(350, 20));
        lblUpdateEmployee.setMinimumSize(new java.awt.Dimension(350, 20));
        lblUpdateEmployee.setPreferredSize(new java.awt.Dimension(350, 20));
        pnlUpdateEmployee.add(lblUpdateEmployee);

        getContentPane().add(pnlUpdateEmployee, java.awt.BorderLayout.PAGE_START);

        pnlUpdateEmployeeFields.setBackground(new java.awt.Color(255, 255, 255));
        pnlUpdateEmployeeFields.setMinimumSize(new java.awt.Dimension(167, 360));
        pnlUpdateEmployeeFields.setPreferredSize(new java.awt.Dimension(250, 360));
        pnlUpdateEmployeeFields.setLayout(new java.awt.GridBagLayout());

        lblName.setText("Họ tên:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblName, gridBagConstraints);

        lblGender.setText("Giới tính:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblGender, gridBagConstraints);

        lblEmail.setText("Email:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblEmail, gridBagConstraints);

        lblDOB.setText("Ngày sinh:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblDOB, gridBagConstraints);

        lblPhone.setText("Số điện thoại:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblPhone, gridBagConstraints);

        lblAddress.setText("Địa chỉ:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblAddress, gridBagConstraints);

        txtName.setPreferredSize(new java.awt.Dimension(64, 30));
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 30);
        pnlUpdateEmployeeFields.add(txtName, gridBagConstraints);

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));
        cbGender.setPreferredSize(new java.awt.Dimension(72, 30));
        cbGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGenderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 30);
        pnlUpdateEmployeeFields.add(cbGender, gridBagConstraints);

        txtEmail.setPreferredSize(new java.awt.Dimension(64, 30));
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 30);
        pnlUpdateEmployeeFields.add(txtEmail, gridBagConstraints);

        txtDOB.setPreferredSize(new java.awt.Dimension(64, 30));
        txtDOB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDOBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 30);
        pnlUpdateEmployeeFields.add(txtDOB, gridBagConstraints);

        txtPhone.setPreferredSize(new java.awt.Dimension(64, 30));
        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 30);
        pnlUpdateEmployeeFields.add(txtPhone, gridBagConstraints);

        txtAddress.setPreferredSize(new java.awt.Dimension(64, 30));
        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 30);
        pnlUpdateEmployeeFields.add(txtAddress, gridBagConstraints);

        lblEmpoyeeID.setText("Mã nhân viên:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.insets = new java.awt.Insets(20, 30, 20, 20);
        pnlUpdateEmployeeFields.add(lblEmpoyeeID, gridBagConstraints);

        txtEmployeeID.setEditable(false);
        txtEmployeeID.setEnabled(false);
        txtEmployeeID.setFocusable(false);
        txtEmployeeID.setPreferredSize(new java.awt.Dimension(64, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 30);
        pnlUpdateEmployeeFields.add(txtEmployeeID, gridBagConstraints);

        getContentPane().add(pnlUpdateEmployeeFields, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // Validate form
        if (!validateForm()) {
            return;
        }

        // Get form data
        String name = txtName.getText().trim();
        String dob = txtDOB.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String address = txtAddress.getText().trim();
        boolean gender = cbGender.getSelectedIndex() == 0; // true for Nam (Male), false for Nữ (Female)

        // Parse date of birth
        LocalDate dateOfBirth = EmployeeValidation.parseDate(dob);

        // Check for duplicate email/phone with other employees
        // Skip validation for the current employee's email/phone
        String currentEmail = employeeDTO.getEmail();
        String currentPhone = employeeDTO.getPhone();

        // Only check for duplicate email if it changed
        if (!email.equals(currentEmail) && !email.isEmpty()) {
            if (employeeBUS.employeeDAO.isEmailExists(email)) {
                JOptionPane.showMessageDialog(this, "Email đã được sử dụng bởi nhân viên khác!", 
                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtEmail.requestFocus();
                return;
            }
        }

        // Only check for duplicate phone if it changed
        if (!phone.equals(currentPhone)) {
            if (employeeBUS.employeeDAO.isPhoneExists(phone)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại đã được sử dụng bởi nhân viên khác!", 
                        "Lỗi", JOptionPane.ERROR_MESSAGE);
                txtPhone.requestFocus();
                return;
            }
        }

        // Update employee object with new data
        employeeDTO.setName(name);
        employeeDTO.setDob(dateOfBirth);
        employeeDTO.setGender(gender);
        employeeDTO.setEmail(email);
        employeeDTO.setPhone(phone);
        employeeDTO.setAddress(address);

        // Update employee in database
        boolean success = employeeBUS.updateEmployee(employeeDTO);
        if (success) {
            JOptionPane.showMessageDialog(this, "Cập nhật thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            dispose(); // Close dialog after successful update
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose(); // Close dialog
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void cbGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbGenderActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtDOBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDOBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDOBActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Confirm before deletion
        int confirm = JOptionPane.showConfirmDialog(this, 
                "Bạn có chắc chắn muốn xóa nhân viên này?", 
                "Xác nhận xóa", 
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            String employeeID = txtEmployeeID.getText();
            boolean success = employeeBUS.deleteEmployee(employeeID);

            if (success) {
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                dispose(); // Close dialog after successful deletion
            } else {
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateEmployee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdateEmployee dialog = new UpdateEmployee(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmpoyeeID;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblUpdateEmployee;
    private javax.swing.JPanel pnlUpdateButton;
    private javax.swing.JPanel pnlUpdateEmployee;
    private javax.swing.JPanel pnlUpdateEmployeeFields;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
