/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.pharmacy.app.GUI.Requests;

import com.pharmacy.app.BUS.RequestBUS;
import com.pharmacy.app.DTO.RequestDTO;
import com.pharmacy.app.DTO.SessionDTO;
import java.awt.Frame;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;

/**
 *
 * @author phong
 */
public class UpdateRequest extends javax.swing.JDialog {
    RequestDTO reqDTO;
    RequestBUS reqBUS;
    /**
     * Creates new form UpdateRequest
     */
    public UpdateRequest(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    UpdateRequest(Frame frame, boolean b, RequestDTO selectedProduct) {
        super(frame, b);
        initComponents();
        this.reqDTO = selectedProduct;
        loadData(selectedProduct);
        reqBUS = new RequestBUS();
        setupUpdateListeners();
        checkUserRoleAndSetEditable();
    }
    private void checkUserRoleAndSetEditable() {
    // Kiểm tra nếu role là ROLE003 thì disable cbbStatus và txtComment
        if ("ROLE003".equals(SessionDTO.getCurrentUser().getRoleID())) {
            cbbStatus.setEnabled(false);
            txtComment.setEditable(false);
        } else {
            cbbStatus.setEnabled(true);
            txtComment.setEditable(true);
        }
    }
    private void loadData(RequestDTO req){
        txtRequestID.setText(req.getRequestId());
        txtRequestDate.setText(req.getRequestDate().toString());
        cbRequestType.setSelectedItem(req.getRequestType());
        cbbStatus.setSelectedItem(req.getStatus());
        Date startdate = Date.from(req.getLeaveStartDate().atStartOfDay(ZoneId.systemDefault()).toInstant());
        startDatePicker.setDate(startdate);
        txtReason.setText(req.getReason());
        
        if (req.getComment() != null) {
            txtComment.setText(req.getComment());
        } else {
            txtComment.setText("");
        }
        
        if (req.getLeaveEndDate() != null) {
            Date date = Date.from(req.getLeaveEndDate().atStartOfDay(ZoneId.systemDefault()).toInstant());
            endDatePicker.setDate(date);
        }
        if (req.getResponseDate() != null){
            txtResponseDate.setText(req.getRequestDate().toString());
        }else{
            txtResponseDate.setText("");
        }
    }
    private void updateResponseDate() {
        String status = cbbStatus.getSelectedItem().toString();
        if ("Đã duyệt".equals(status) || "Từ chối".equals(status)) {
            txtResponseDate.setText(java.time.LocalDate.now().toString());
        } else {
            txtResponseDate.setText("");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlRequest = new javax.swing.JPanel();
        lblRequest = new javax.swing.JLabel();
        pnlRequestFields = new javax.swing.JPanel();
        lblRequestType = new javax.swing.JLabel();
        txtRequestDate = new javax.swing.JTextField();
        cbRequestType = new javax.swing.JComboBox<>();
        lblRequestDate = new javax.swing.JLabel();
        lblLeaveStartDate = new javax.swing.JLabel();
        lblLeaveEndDate = new javax.swing.JLabel();
        lblReason = new javax.swing.JLabel();
        lblRequestID = new javax.swing.JLabel();
        txtRequestID = new javax.swing.JTextField();
        spReason = new javax.swing.JScrollPane();
        txtReason = new javax.swing.JTextArea();
        startDatePicker = new com.toedter.calendar.JDateChooser();
        endDatePicker = new com.toedter.calendar.JDateChooser();
        pnlButton = new javax.swing.JPanel();
        btnUpdateRequest = new javax.swing.JButton();
        btnCancelRequest = new javax.swing.JButton();
        pnlApprovalInfo = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        lblResponseDate = new javax.swing.JLabel();
        txtResponseDate = new javax.swing.JTextField();
        lblComment = new javax.swing.JLabel();
        spComment = new javax.swing.JScrollPane();
        txtComment = new javax.swing.JTextArea();
        cbbStatus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        lblRequest.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRequest.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRequest.setText("THÔNG TIN ĐƠN");
        pnlRequest.add(lblRequest);

        pnlRequestFields.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nội dung đơn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnlRequestFields.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblRequestType.setText("Loại đơn:");
        pnlRequestFields.add(lblRequestType, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 111, 75, -1));

        txtRequestDate.setEditable(false);
        pnlRequestFields.add(txtRequestDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 230, -1));

        cbRequestType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Đơn xin nghỉ phép", "Đơn xin nghỉ phép không lương", "Đơn xin thôi việc", "Đơn xin nghỉ ốm", "Đơn xin nghỉ thai sản", "Đơn xin nghỉ lý do khác" }));
        pnlRequestFields.add(cbRequestType, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 108, 230, -1));

        lblRequestDate.setText("Ngày gửi đơn:");
        pnlRequestFields.add(lblRequestDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 163, -1, -1));

        lblLeaveStartDate.setText("Ngày nghỉ:");
        pnlRequestFields.add(lblLeaveStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 212, 75, -1));

        lblLeaveEndDate.setText("Ngày quay lại:");
        pnlRequestFields.add(lblLeaveEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 258, -1, -1));

        lblReason.setText("Lí do:");
        pnlRequestFields.add(lblReason, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 304, 75, -1));

        lblRequestID.setText("Mã đơn:");
        pnlRequestFields.add(lblRequestID, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 59, 75, -1));

        txtRequestID.setEditable(false);
        txtRequestID.setFocusable(false);
        pnlRequestFields.add(txtRequestID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 56, 230, -1));

        spReason.setMinimumSize(new java.awt.Dimension(234, 86));

        txtReason.setColumns(20);
        txtReason.setRows(5);
        spReason.setViewportView(txtReason);

        pnlRequestFields.add(spReason, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 304, -1, -1));
        pnlRequestFields.add(startDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 200, -1));

        endDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endDatePickerPropertyChange(evt);
            }
        });
        pnlRequestFields.add(endDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 250, 200, -1));

        pnlButton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 5));

        btnUpdateRequest.setBackground(new java.awt.Color(0, 204, 51));
        btnUpdateRequest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdateRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateRequest.setText("Cập nhật");
        btnUpdateRequest.setEnabled(false);
        btnUpdateRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRequestActionPerformed(evt);
            }
        });
        pnlButton.add(btnUpdateRequest);

        btnCancelRequest.setBackground(new java.awt.Color(153, 153, 153));
        btnCancelRequest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCancelRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelRequest.setText("Hủy");
        btnCancelRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelRequestActionPerformed(evt);
            }
        });
        pnlButton.add(btnCancelRequest);

        pnlApprovalInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin phê duyệt", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        pnlApprovalInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblStatus.setText("Trạng thái:");
        pnlApprovalInfo.add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 136, 105, -1));

        lblResponseDate.setText("Ngày phản hồi:");
        pnlApprovalInfo.add(lblResponseDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 185, 105, -1));

        txtResponseDate.setEditable(false);
        txtResponseDate.setFocusable(false);
        pnlApprovalInfo.add(txtResponseDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 182, 198, -1));

        lblComment.setText("Ghi chú của quản lý:");
        pnlApprovalInfo.add(lblComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 234, -1, -1));

        spComment.setMinimumSize(new java.awt.Dimension(234, 86));

        txtComment.setEditable(false);
        txtComment.setColumns(20);
        txtComment.setRows(5);
        spComment.setViewportView(txtComment);

        pnlApprovalInfo.add(spComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 234, 198, 120));

        cbbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chờ duyệt", "Đã duyệt", "Từ chối" }));
        pnlApprovalInfo.add(cbbStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 200, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlRequestFields, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(pnlApprovalInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(pnlRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlRequestFields, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(pnlApprovalInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(pnlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void endDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDatePickerPropertyChange

    }//GEN-LAST:event_endDatePickerPropertyChange

    private void btnCancelRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelRequestActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelRequestActionPerformed

    private void btnUpdateRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRequestActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn cập nhật không?", "Xác nhận", JOptionPane.YES_NO_OPTION);

       if (option == JOptionPane.YES_OPTION) {
            String ID = txtRequestID.getText().trim();
            String type = (String) cbRequestType.getSelectedItem();
            String reason = txtReason.getText().trim();
            String cmt = txtComment.getText().trim();
            LocalDate resDate;
            if (txtResponseDate.getText().equalsIgnoreCase("")){
                resDate = null;
            }else{
                resDate = LocalDate.parse(txtResponseDate.getText());
                }
            Date startDate = startDatePicker.getDate();


            // Chuyển startDate sang LocalDate
            LocalDate startLocalDate = startDate.toInstant()
                                                .atZone(ZoneId.systemDefault())
                                                .toLocalDate();

            // Lấy và chuyển endDate nếu có
            Date endDate = endDatePicker.getDate();
            LocalDate endLocalDate = null;
            if (endDate != null) {
                endLocalDate = endDate.toInstant()
                                      .atZone(ZoneId.systemDefault())
                                      .toLocalDate();
            }
            
            reqDTO.setRequestId(ID);
            reqDTO.setLeaveStartDate(startLocalDate);
            reqDTO.setLeaveEndDate(endLocalDate);
            reqDTO.setRequestType(type);
            reqDTO.setReason(reason);
            reqDTO.setStatus(cbbStatus.getSelectedItem().toString());
            reqDTO.setComment(cmt);
            reqDTO.setResponseDate(resDate);
            
            boolean isUpdated = reqBUS.updateRequest(reqDTO);
        if (isUpdated) {
            loadData(reqDTO);
            btnUpdateRequest.setEnabled(false);
            JOptionPane.showMessageDialog(this, "Đã cập nhật thành công.");
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật thất bại. Vui lòng thử lại.");
        }
       }
    }//GEN-LAST:event_btnUpdateRequestActionPerformed
    

// Trong phương thức initComponents(), sau khi khởi tạo các component, thêm:
private void setupUpdateListeners() {
    // Listener cho endDatePicker
    endDatePicker.addPropertyChangeListener("date", new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            checkForChanges();
        }
    });
    
    // Listener cho startDatePicker
    startDatePicker.addPropertyChangeListener("date", new PropertyChangeListener() {
        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            checkForChanges();
        }
    });
    
    // Listener cho cbRequestType
    cbRequestType.addActionListener(e -> checkForChanges());
    
    // Listener cho cbbStatus
    cbbStatus.addActionListener(e -> {
        checkForChanges();
        updateResponseDate();
    });
    
    // Listener cho txtReason
    addTextChangeListener(txtReason, () -> checkForChanges());
    
    // Listener cho txtComment
    addTextChangeListener(txtComment, () -> checkForChanges());
    
    // Ban đầu disable nút cập nhật
    btnUpdateRequest.setEnabled(false);
}

// Phương thức hỗ trợ thêm DocumentListener cho JTextComponent
private void addTextChangeListener(JTextComponent textComponent, Runnable callback) {
    textComponent.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            callback.run();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            callback.run();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            callback.run();
        }
    });
}
private boolean validateDates() {
    Date currentDate = new Date();
    Date startDate = startDatePicker.getDate();
    Date endDate = endDatePicker.getDate();
    
    
    // Kiểm tra endDate phải sau startDate (nếu có cả hai)
    if (startDate != null && endDate != null && endDate.before(startDate)) {
        JOptionPane.showMessageDialog(this, "Ngày kết thúc phải sau ngày bắt đầu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    
    return true;
}
// Phương thức kiểm tra thay đổi
private void checkForChanges() {
    if (reqDTO == null) return;
    // Kiểm tra nếu status là "Đã duyệt" hoặc "Từ chối" thì luôn disable nút cập nhật
    String currentStatus = cbbStatus.getSelectedItem().toString();
    if ("Đã duyệt".equals(currentStatus) || "Từ chối".equals(currentStatus)) {
        btnUpdateRequest.setEnabled(false);
        return; // Thoát luôn vì không cần kiểm tra các thay đổi khác
    }
    if (!validateDates()) {
        btnUpdateRequest.setEnabled(false);
        return;
    }
    // Kiểm tra thay đổi với endDatePicker
    boolean endDateChanged = false;
    if (endDatePicker.getDate() != null) {
        endDateChanged = !endDatePicker.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
                .equals(reqDTO.getLeaveEndDate());
    } else if (reqDTO.getLeaveEndDate() != null) {
        endDateChanged = true;
    }
    
    // Kiểm tra thay đổi với startDatePicker
    boolean startDateChanged = !startDatePicker.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
            .equals(reqDTO.getLeaveStartDate());
    
    // Kiểm tra thay đổi với cbRequestType
    boolean requestTypeChanged = !cbRequestType.getSelectedItem().toString().equals(reqDTO.getRequestType());
    
    // Kiểm tra thay đổi với cbbStatus
    boolean statusChanged = !cbbStatus.getSelectedItem().toString().equals(reqDTO.getStatus());
    
    // Kiểm tra thay đổi với txtReason
    boolean reasonChanged = !txtReason.getText().equals(reqDTO.getReason());
    
    // Kiểm tra thay đổi với txtComment
    boolean commentChanged = false;
    if (txtComment.getText() != null && reqDTO.getComment() != null) {
        commentChanged = !txtComment.getText().equals(reqDTO.getComment());
    } else if (txtComment.getText() != null || reqDTO.getComment() != null) {
        commentChanged = true;
    }
    
    // Kích hoạt nút cập nhật nếu có bất kỳ thay đổi nào
    btnUpdateRequest.setEnabled(endDateChanged || startDateChanged || requestTypeChanged || 
                               statusChanged || reasonChanged || commentChanged);
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UpdateRequest dialog = new UpdateRequest(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelRequest;
    private javax.swing.JButton btnUpdateRequest;
    private javax.swing.JComboBox<String> cbRequestType;
    private javax.swing.JComboBox<String> cbbStatus;
    private com.toedter.calendar.JDateChooser endDatePicker;
    private javax.swing.JLabel lblComment;
    private javax.swing.JLabel lblLeaveEndDate;
    private javax.swing.JLabel lblLeaveStartDate;
    private javax.swing.JLabel lblReason;
    private javax.swing.JLabel lblRequest;
    private javax.swing.JLabel lblRequestDate;
    private javax.swing.JLabel lblRequestID;
    private javax.swing.JLabel lblRequestType;
    private javax.swing.JLabel lblResponseDate;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlApprovalInfo;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlRequest;
    private javax.swing.JPanel pnlRequestFields;
    private javax.swing.JScrollPane spComment;
    private javax.swing.JScrollPane spReason;
    private com.toedter.calendar.JDateChooser startDatePicker;
    private javax.swing.JTextArea txtComment;
    private javax.swing.JTextArea txtReason;
    private javax.swing.JTextField txtRequestDate;
    private javax.swing.JTextField txtRequestID;
    private javax.swing.JTextField txtResponseDate;
    // End of variables declaration//GEN-END:variables
}
